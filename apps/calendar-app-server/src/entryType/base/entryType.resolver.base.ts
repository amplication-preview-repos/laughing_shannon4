/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EntryType } from "./EntryType";
import { EntryTypeCountArgs } from "./EntryTypeCountArgs";
import { EntryTypeFindManyArgs } from "./EntryTypeFindManyArgs";
import { EntryTypeFindUniqueArgs } from "./EntryTypeFindUniqueArgs";
import { CreateEntryTypeArgs } from "./CreateEntryTypeArgs";
import { UpdateEntryTypeArgs } from "./UpdateEntryTypeArgs";
import { DeleteEntryTypeArgs } from "./DeleteEntryTypeArgs";
import { TimeEntryFindManyArgs } from "../../timeEntry/base/TimeEntryFindManyArgs";
import { TimeEntry } from "../../timeEntry/base/TimeEntry";
import { EntryTypeService } from "../entryType.service";
@graphql.Resolver(() => EntryType)
export class EntryTypeResolverBase {
  constructor(protected readonly service: EntryTypeService) {}

  async _entryTypesMeta(
    @graphql.Args() args: EntryTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EntryType])
  async entryTypes(
    @graphql.Args() args: EntryTypeFindManyArgs
  ): Promise<EntryType[]> {
    return this.service.entryTypes(args);
  }

  @graphql.Query(() => EntryType, { nullable: true })
  async entryType(
    @graphql.Args() args: EntryTypeFindUniqueArgs
  ): Promise<EntryType | null> {
    const result = await this.service.entryType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EntryType)
  async createEntryType(
    @graphql.Args() args: CreateEntryTypeArgs
  ): Promise<EntryType> {
    return await this.service.createEntryType({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EntryType)
  async updateEntryType(
    @graphql.Args() args: UpdateEntryTypeArgs
  ): Promise<EntryType | null> {
    try {
      return await this.service.updateEntryType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EntryType)
  async deleteEntryType(
    @graphql.Args() args: DeleteEntryTypeArgs
  ): Promise<EntryType | null> {
    try {
      return await this.service.deleteEntryType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TimeEntry], { name: "timeEntries" })
  async findTimeEntries(
    @graphql.Parent() parent: EntryType,
    @graphql.Args() args: TimeEntryFindManyArgs
  ): Promise<TimeEntry[]> {
    const results = await this.service.findTimeEntries(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
