/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EntryTypeService } from "../entryType.service";
import { EntryTypeCreateInput } from "./EntryTypeCreateInput";
import { EntryType } from "./EntryType";
import { EntryTypeFindManyArgs } from "./EntryTypeFindManyArgs";
import { EntryTypeWhereUniqueInput } from "./EntryTypeWhereUniqueInput";
import { EntryTypeUpdateInput } from "./EntryTypeUpdateInput";
import { TimeEntryFindManyArgs } from "../../timeEntry/base/TimeEntryFindManyArgs";
import { TimeEntry } from "../../timeEntry/base/TimeEntry";
import { TimeEntryWhereUniqueInput } from "../../timeEntry/base/TimeEntryWhereUniqueInput";

export class EntryTypeControllerBase {
  constructor(protected readonly service: EntryTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EntryType })
  async createEntryType(
    @common.Body() data: EntryTypeCreateInput
  ): Promise<EntryType> {
    return await this.service.createEntryType({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EntryType] })
  @ApiNestedQuery(EntryTypeFindManyArgs)
  async entryTypes(@common.Req() request: Request): Promise<EntryType[]> {
    const args = plainToClass(EntryTypeFindManyArgs, request.query);
    return this.service.entryTypes({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EntryType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async entryType(
    @common.Param() params: EntryTypeWhereUniqueInput
  ): Promise<EntryType | null> {
    const result = await this.service.entryType({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EntryType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEntryType(
    @common.Param() params: EntryTypeWhereUniqueInput,
    @common.Body() data: EntryTypeUpdateInput
  ): Promise<EntryType | null> {
    try {
      return await this.service.updateEntryType({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EntryType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEntryType(
    @common.Param() params: EntryTypeWhereUniqueInput
  ): Promise<EntryType | null> {
    try {
      return await this.service.deleteEntryType({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/timeEntries")
  @ApiNestedQuery(TimeEntryFindManyArgs)
  async findTimeEntries(
    @common.Req() request: Request,
    @common.Param() params: EntryTypeWhereUniqueInput
  ): Promise<TimeEntry[]> {
    const query = plainToClass(TimeEntryFindManyArgs, request.query);
    const results = await this.service.findTimeEntries(params.id, {
      ...query,
      select: {
        calendar: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        description: true,

        entryType: {
          select: {
            id: true,
          },
        },

        hoursWorked: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeEntries")
  async connectTimeEntries(
    @common.Param() params: EntryTypeWhereUniqueInput,
    @common.Body() body: TimeEntryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeEntries: {
        connect: body,
      },
    };
    await this.service.updateEntryType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeEntries")
  async updateTimeEntries(
    @common.Param() params: EntryTypeWhereUniqueInput,
    @common.Body() body: TimeEntryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeEntries: {
        set: body,
      },
    };
    await this.service.updateEntryType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeEntries")
  async disconnectTimeEntries(
    @common.Param() params: EntryTypeWhereUniqueInput,
    @common.Body() body: TimeEntryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeEntries: {
        disconnect: body,
      },
    };
    await this.service.updateEntryType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
