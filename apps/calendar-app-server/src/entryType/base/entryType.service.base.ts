/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EntryType as PrismaEntryType,
  TimeEntry as PrismaTimeEntry,
} from "@prisma/client";

export class EntryTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EntryTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.entryType.count(args);
  }

  async entryTypes(
    args: Prisma.EntryTypeFindManyArgs
  ): Promise<PrismaEntryType[]> {
    return this.prisma.entryType.findMany(args);
  }
  async entryType(
    args: Prisma.EntryTypeFindUniqueArgs
  ): Promise<PrismaEntryType | null> {
    return this.prisma.entryType.findUnique(args);
  }
  async createEntryType(
    args: Prisma.EntryTypeCreateArgs
  ): Promise<PrismaEntryType> {
    return this.prisma.entryType.create(args);
  }
  async updateEntryType(
    args: Prisma.EntryTypeUpdateArgs
  ): Promise<PrismaEntryType> {
    return this.prisma.entryType.update(args);
  }
  async deleteEntryType(
    args: Prisma.EntryTypeDeleteArgs
  ): Promise<PrismaEntryType> {
    return this.prisma.entryType.delete(args);
  }

  async findTimeEntries(
    parentId: string,
    args: Prisma.TimeEntryFindManyArgs
  ): Promise<PrismaTimeEntry[]> {
    return this.prisma.entryType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeEntries(args);
  }
}
