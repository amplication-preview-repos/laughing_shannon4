/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TimeEntry as PrismaTimeEntry,
  Calendar as PrismaCalendar,
  EntryType as PrismaEntryType,
  User as PrismaUser,
} from "@prisma/client";

export class TimeEntryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TimeEntryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.timeEntry.count(args);
  }

  async timeEntries(
    args: Prisma.TimeEntryFindManyArgs
  ): Promise<PrismaTimeEntry[]> {
    return this.prisma.timeEntry.findMany(args);
  }
  async timeEntry(
    args: Prisma.TimeEntryFindUniqueArgs
  ): Promise<PrismaTimeEntry | null> {
    return this.prisma.timeEntry.findUnique(args);
  }
  async createTimeEntry(
    args: Prisma.TimeEntryCreateArgs
  ): Promise<PrismaTimeEntry> {
    return this.prisma.timeEntry.create(args);
  }
  async updateTimeEntry(
    args: Prisma.TimeEntryUpdateArgs
  ): Promise<PrismaTimeEntry> {
    return this.prisma.timeEntry.update(args);
  }
  async deleteTimeEntry(
    args: Prisma.TimeEntryDeleteArgs
  ): Promise<PrismaTimeEntry> {
    return this.prisma.timeEntry.delete(args);
  }

  async getCalendar(parentId: string): Promise<PrismaCalendar | null> {
    return this.prisma.timeEntry
      .findUnique({
        where: { id: parentId },
      })
      .calendar();
  }

  async getEntryType(parentId: string): Promise<PrismaEntryType | null> {
    return this.prisma.timeEntry
      .findUnique({
        where: { id: parentId },
      })
      .entryType();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.timeEntry
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
