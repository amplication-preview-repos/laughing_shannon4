/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CalendarService } from "../calendar.service";
import { CalendarCreateInput } from "./CalendarCreateInput";
import { Calendar } from "./Calendar";
import { CalendarFindManyArgs } from "./CalendarFindManyArgs";
import { CalendarWhereUniqueInput } from "./CalendarWhereUniqueInput";
import { CalendarUpdateInput } from "./CalendarUpdateInput";
import { TimeEntryFindManyArgs } from "../../timeEntry/base/TimeEntryFindManyArgs";
import { TimeEntry } from "../../timeEntry/base/TimeEntry";
import { TimeEntryWhereUniqueInput } from "../../timeEntry/base/TimeEntryWhereUniqueInput";

export class CalendarControllerBase {
  constructor(protected readonly service: CalendarService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Calendar })
  async createCalendar(
    @common.Body() data: CalendarCreateInput
  ): Promise<Calendar> {
    return await this.service.createCalendar({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Calendar] })
  @ApiNestedQuery(CalendarFindManyArgs)
  async calendars(@common.Req() request: Request): Promise<Calendar[]> {
    const args = plainToClass(CalendarFindManyArgs, request.query);
    return this.service.calendars({
      ...args,
      select: {
        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Calendar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async calendar(
    @common.Param() params: CalendarWhereUniqueInput
  ): Promise<Calendar | null> {
    const result = await this.service.calendar({
      where: params,
      select: {
        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Calendar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCalendar(
    @common.Param() params: CalendarWhereUniqueInput,
    @common.Body() data: CalendarUpdateInput
  ): Promise<Calendar | null> {
    try {
      return await this.service.updateCalendar({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Calendar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCalendar(
    @common.Param() params: CalendarWhereUniqueInput
  ): Promise<Calendar | null> {
    try {
      return await this.service.deleteCalendar({
        where: params,
        select: {
          createdAt: true,
          date: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/timeEntries")
  @ApiNestedQuery(TimeEntryFindManyArgs)
  async findTimeEntries(
    @common.Req() request: Request,
    @common.Param() params: CalendarWhereUniqueInput
  ): Promise<TimeEntry[]> {
    const query = plainToClass(TimeEntryFindManyArgs, request.query);
    const results = await this.service.findTimeEntries(params.id, {
      ...query,
      select: {
        calendar: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        description: true,

        entryType: {
          select: {
            id: true,
          },
        },

        hoursWorked: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeEntries")
  async connectTimeEntries(
    @common.Param() params: CalendarWhereUniqueInput,
    @common.Body() body: TimeEntryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeEntries: {
        connect: body,
      },
    };
    await this.service.updateCalendar({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeEntries")
  async updateTimeEntries(
    @common.Param() params: CalendarWhereUniqueInput,
    @common.Body() body: TimeEntryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeEntries: {
        set: body,
      },
    };
    await this.service.updateCalendar({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeEntries")
  async disconnectTimeEntries(
    @common.Param() params: CalendarWhereUniqueInput,
    @common.Body() body: TimeEntryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeEntries: {
        disconnect: body,
      },
    };
    await this.service.updateCalendar({
      where: params,
      data,
      select: { id: true },
    });
  }
}
